// Copyright Fauna, Inc.
// SPDX-License-Identifier: MIT-0
CreateFunction({
  name: "GetNewMessages",
  body: Query(Lambda(
    ["chatId", "requestedLanguage", "lastSeenAt"],
    // Return an array containing:
    // - the messages sent after the Var("lastSeenAt") timestamp
    // - or all messages if Var("lastSeenAt") is null
    // - where .translations.language is equal to Var("requestedLanguage") if available
    // - or send the original message if not or if requestedLanguage is null.
    // Array should look like:
    // [ 
    //   { id: "1", timestamp: "0000001", chat: "1", language: "fr", text: "Bonjour" },
    //   { id: "2", timestamp: "0000002", chat: "1", language: "en", text: "How are you?" }
    // ]
    // NOTE: This uses the default pagination, returning up to 64 messages.
    Map(
      // This Paginate() block creates a list of the first 64 messages sent after the last
      // seen timestamp, if provided. If not, it creates a list of the first 64 messages
      // in the chat.
      Paginate(
        Range(
          Match(
            Index("MessagesByChat"),
            [
              Var("chatId")
            ]
          ),
          If(
            IsNull(Var("lastSeenAt")),
            0,
            Var("lastSeenAt")
          ),
          Now()
        )
      ),
      // For each message, we return the translated version if it exists, or the original
      // if not.
      Lambda(
        "match",
        Let(
          {
            timestamp: Select(0, Var("match")),
            messageID: Select(1, Var("match")),
            chat: Select(2, Var("match")),
            originalLanguage: Select(3, Var("match")),
            originalText: Select(4, Var("match")),
            translatedMessage: Match(
              Index("TranslationsByMessageAndLanguage"),
              [
                Ref(Collection("Messages"), Var("messageID")),
                Var("requestedLanguage")
              ]
            ),
            // Because there should only be one translation for a message/language
            // pair, we can use Get() to return the "first" (only) message in the
            // set. If the set is empty, we instead use the text and language from
            // the original message.
            message: If(
              IsNonEmpty(Var("translatedMessage")),
              Select(["data"], Get(Var("translatedMessage"))),
              {
                language: Var("originalLanguage"),
                text: Var("originalText"),
              }
            )
          },
          {
            id:         Var("messageID"),
            timestamp:  Var("timestamp"),
            chat:       Var("chat"),
            language:   Select(["language"], Var("message")),
            text:       Select(["text"], Var("message")),
          }
        )
      )
    )
  ))
})

// Shape of a Message:
// {
//   chat: "1234567890",
//   originalLanguage: "en",
//   originalText: "A string",
// }

// Shape of a Translation:
// {
//   message: Ref(Collection("Messages"), "1234567890"),
//   language: "en",
//   text: "A string",
// }